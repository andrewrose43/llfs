CSC360 ASSIGNMENT 3

For this assignment, I have implemented a UFS-style file system. To explain my design choices, I will go through the system's virtual disk zone by zone.

Note: so that it may be #included in the apps/ test scripts, I have split off some of File.c's contents into File.h.

The provided shell script SimpleShellScript.sh makes the project and stores a 2-block text file in the system.

Missing features, due to lack of time: sub-directories, deletion, indirect data blocks, robustness.

The virtual disk used by this filesystem can be divided into four zones:

Zone 0: Just making a note here that THERE IS NO SUPERBLOCK. The traditional UFS has a superblock to define quantities such as a magic number, the boundaries of the other disk areas, and the heads of freelists of inodes and file blocks.

A magic number is unnecessary in this context because there is no need to distinguish between different filesystem types. Next, the freelist heads are unnecessary because I have implemented those lists as bit vectors, with zeroes and ones representing empty and full disk blocks, respectively.

The remaining quantities do not need to be stored in a superblock because this filesystem is built specifically to run on a 2 MB section of a computer's disk. It does not need to be scalable to other storage spaces, so it makes more sense to simplify the system by including those quantities as C #defines rather than digging into a superblock every time they are needed.

Keeping those quantities in #define statements accomplishes two things: first, it renders them uneditable to malicious users, and second, it simplifies and speeds up operations. Instead of running a complicated read operation every time one of those quantities is needed, the #define constant can simply be named.

Zone 1 (1 block): Free I-node Vector

This is a bit vector in which each successive bit represents one successive i-node block. A 0 represents a free block, while a 1 represents an occupied block.

There are 255 i-node blocks, so only 255 bits in this zone are used. Specifically, they're bits 2 through 257, since bits 0 and 1 represent the two free block vector blocks.

Zone 2 (1 block): Free Data Block Vector & Root Directory Block Number

Similar to Zone 1, but representing data blocks instead of i-nodes. There are 3839 data blocks, so only the last 3839 bits here are used to track free data blocks.

Two bytes at the beginning of Zone 2 are used to store the block belonging to the root directory.

Zone 3 (255 blocks): I-node Area

Each i-node is 29 bytes long; this length was the result of modifying the recommended 32-byte format and reducing the recommended 4-byte flag area to 1 byte, since only a single flag (indicating whether the i-node represents a file or a directory) is required. However, I was unable to implement indirect data blocks in time to submit, so file size is capped at 5120 bytes.

Each i-node takes up one block. This is inefficient, but it was recommended by Prof. Coady to simplify the project.

Zone 4 (3839 blocks): Data Block Area

There's not much to say about the data block area. It comprises 3839 512-byte blocks. I have followed the assignment document's directory layout to the letter.

Finally, my system does not include a swap area, which is necessary for a full-fledged OS but is not needed for a standalone file system.
